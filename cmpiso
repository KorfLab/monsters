#!/usr/bin/env python3
import os
import math
import copy
import argparse

parser = argparse.ArgumentParser(
	description='Isoform comparing program')
parser.add_argument('gff1', type=str, metavar='<file>',
	help='input gff file 1')
parser.add_argument('gff2', type=str, metavar='<file>',
	help='input gff file 2')
arg = parser.parse_args()

def get_introns(gff):
	introns = {}
	total = 0
	with open(gff) as fp:
		for line in fp.readlines():
			if line.startswith('#'): continue
			f = line.split()
			if len(f) < 8: continue
			if f[2] != 'intron': continue
			if f[6] != '+': continue
			beg, end, score = f[3], f[4], f[5]
			beg = int(beg)
			end = int(end)
			score = 0 if score == '.' else float(score)
			if (beg,end) not in introns: introns[(beg,end)] = 0
			introns[(beg,end)] += score
			total += score

	# convert to histogram
	for k in introns: introns[k] /= total

	return introns

def manhattan(p, q):
	assert(math.isclose(sum(p), 1.0, abs_tol=1e-6))
	assert(math.isclose(sum(q), 1.0, abs_tol=1e-6))
	d = 0
	for pi, qi in zip(p, q):
		d += abs(pi - qi)
	return d
	
def expdiff(introns1, introns2):

	# non-mutating
	i1 = copy.deepcopy(introns1)
	i2 = copy.deepcopy(introns2)

	# ensure all introns are in both collections
	for k in i1:
		if k not in i2: i2[k] = 0
	for k in i2:
		if k not in i1: i1[k] = 0

	# compare distances
	p1 = []
	p2 = []
	details = []
	for k in i1:
		p1.append(i1[k])
		p2.append(i2[k])
		details.append((k, i1[k], i2[k]))
	
	distance = manhattan(p1, p2)
	return distance, details
	
i1 = get_introns(arg.gff1)
i2 = get_introns(arg.gff2)

base = os.path.basename(arg.gff2)
name = os.path.splitext(base)[0]
dist, details = expdiff(i1, i2)
print(f'{dist}\t{name}')
